/* 
 * Waardering onroerende zaken
 *
 * Deze API levert actuele gegevens over WOZ-objecten 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Belanghebbende eigenaar, erfpachter of houder van een opstalrecht of een vruchtgebruiker
    /// </summary>
    [DataContract]
    public partial class BelanghebbendeEigenaarAllOf :  IEquatable<BelanghebbendeEigenaarAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BelanghebbendeEigenaarAllOf" /> class.
        /// </summary>
        /// <param name="soort">omschrijving van het soort zakelijk recht dat de eigenaar heeft op het WOZ-object.</param>
        public BelanghebbendeEigenaarAllOf(string soort = default(string))
        {
            this.Soort = soort;
        }
        
        /// <summary>
        /// omschrijving van het soort zakelijk recht dat de eigenaar heeft op het WOZ-object
        /// </summary>
        /// <value>omschrijving van het soort zakelijk recht dat de eigenaar heeft op het WOZ-object</value>
        [DataMember(Name="soort", EmitDefaultValue=false)]
        public string Soort { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BelanghebbendeEigenaarAllOf {\n");
            sb.Append("  Soort: ").Append(Soort).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BelanghebbendeEigenaarAllOf);
        }

        /// <summary>
        /// Returns true if BelanghebbendeEigenaarAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of BelanghebbendeEigenaarAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BelanghebbendeEigenaarAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Soort == input.Soort ||
                    (this.Soort != null &&
                    this.Soort.Equals(input.Soort))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Soort != null)
                    hashCode = hashCode * 59 + this.Soort.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
